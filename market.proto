syntax = "proto3";

// Define the seller service
service SellerService {
  // Register a seller
  rpc RegisterSeller (RegisterSellerRequest) returns (RegisterSellerResponse);

  // Sell a new item
  rpc SellItem (SellItemRequest) returns (SellItemResponse);

  // Update an existing item
  rpc UpdateItem (UpdateItemRequest) returns (UpdateItemResponse);

  // Delete an item
  rpc DeleteItem (DeleteItemRequest) returns (DeleteItemResponse);

  // Display seller's uploaded items
  rpc DisplaySellerItems (DisplaySellerItemsRequest) returns (DisplaySellerItemsResponse);
  
  // Search for items
  rpc SearchItem (SearchItemRequest) returns (SearchItemResponse);

  // Buy an item
  rpc BuyItem (BuyItemRequest) returns (BuyItemResponse);

  // Add item to wishlist
  rpc AddToWishList (AddToWishListRequest) returns (AddToWishListResponse);

  // Rate an item
  rpc RateItem (RateItemRequest) returns (RateItemResponse);
}


// Define request and response messages for seller functionalities
message RegisterSellerRequest {
  string address = 1; // Seller's IP:Port
  string uuid = 2;    // Unique identifier for the seller
}

message RegisterSellerResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message SellItemRequest {
  string productName = 1;
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
  }
  Category category = 2;
  uint32 quantity = 3;
  string description = 4;
  string sellerAddress = 5; // IP:Port of the seller
  double pricePerUnit = 6;
  string sellerUUID = 7; // Unique identifier for the seller
}
// Assumption: productName+Category is unique for each product

message SellItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
  uint32 itemId = 2;
}

message UpdateItemRequest {
  uint32 itemId = 1;
  double newPrice = 2;
  uint32 newQuantity = 3;
  string sellerAddress = 4; // IP:Port of the seller
  string sellerUUID = 5; // Unique identifier for the seller
}

message UpdateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message DeleteItemRequest {
  uint32 itemId = 1;
  string sellerAddress = 2; // IP:Port of the seller
  string sellerUUID = 3; // Unique identifier for the seller
}

message DeleteItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message DisplaySellerItemsRequest {
  string sellerAddress = 1; // IP:Port of the seller
  string sellerUUID = 2; // Unique identifier for the seller
}

message DisplaySellerItemsResponse {
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
  }
  message ItemDetails {
    uint32 itemId = 1;
    double price = 2;
    string productName = 3;
    Category category = 4;
    string description = 5;
    uint32 quantityRemaining = 6;
    string sellerAddress = 7; // IP:Port of the seller
    float rating = 8;
  }
  repeated ItemDetails items = 1;
}

// Define request and response messages for buyer functionalities
message SearchItemRequest {
  string itemName = 1;
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
    ANY = 3;
  }
  Category itemCategory = 2;
}

message SearchItemResponse {
  enum Category {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
  }
  message ItemDetails {
    uint32 itemId = 1;
    double price = 2;
    string productName = 3;
    Category category = 4;
    string description = 5;
    uint32 quantityRemaining = 6;
    string sellerAddress = 7; // IP:Port of the seller
    float rating = 8;
  }
  repeated ItemDetails items = 1;
}

message BuyItemRequest {
  uint32 itemId = 1;
  uint32 quantity = 2;
  string buyerAddress = 3; // IP:Port of the buyer
}

message BuyItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message AddToWishListRequest {
  uint32 itemId = 1;
  string buyerAddress = 2; // IP:Port of the buyer
}

message AddToWishListResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message RateItemRequest {
  uint32 itemId = 1;
  string buyerAddress = 2; // IP:Port of the buyer
  // Rating is an integer between 1 and 5
  uint32 rating = 3;
}

message RateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}
